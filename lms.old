<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
MathJax = {
    tex: { inlineMath: [['$', '$'], ['\\(', '\\)']] },
    svg: { fontCache: 'global' }
};
    </script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    
    <!-- Prism.js CSS -->
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />

    <!-- Prism.js ve ek dil destekleri -->
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-bash.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-c.min.js"></script>
    
</head>
<title>LM Studio Chat</title>
<style>
    :root {
        --background-color: #1e1e1e;
        --text-color: #ffffff;
        --input-background: #2d2d2d;
        --user-message-color: #2b5278;
        --assistant-message-color: #2d2d2d;
        --button-color: #4a90e2;
        --accent-color: #4caf50;
    }

    body,
    html {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        margin: 0;
        padding: 0;
        height: 100%;
        background-color: var(--background-color);
        color: var(--text-color);
    }

    #app {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    #server-url-container {
        padding: 0.5rem;
        background-color: var(--input-background);
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
    }

    #server-url {
        flex-grow: 1;
        padding: 0.5rem;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        border: 1px solid #4a5568;
        border-radius: 0.25rem;
        background-color: var(--background-color);
        color: var(--text-color);
        font-size: 0.9rem;
    }

    #model-select {
        flex-grow: 1;
        padding: 0.5rem;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        border: 1px solid #4a5568;
        border-radius: 0.25rem;
        background-color: var(--background-color);
        color: var(--text-color);
        font-size: 0.9rem;
    }

    #model-select:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    #connect-button {
        padding: 0.5rem 1rem;
        background-color: var(--button-color);
        color: var(--text-color);
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        font-size: 0.9rem;
    }

    #connection-status {
        width: 100%;
        text-align: center;
        padding: 0.25rem;
        font-size: 0.8rem;
        background-color: var(--input-background);
        color: #888;
    }

    #chat-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
    }

    .message {
        max-width: 85%;
        margin-bottom: 1rem;
        padding: 0.5rem 1rem;
        border-radius: 1rem;
        word-wrap: break-word;
        font-size: 0.9rem;
        line-height: 1.4;
    }

    .user-message {
        align-self: flex-end;
        background-color: var(--user-message-color);
        color: #e6f2ff;
    }

    .assistant-message {
        align-self: flex-start;
        background-color: var(--assistant-message-color);
        color: var(--text-color);
    }

    .message-header {
        font-weight: bold;
        margin-bottom: 0.25rem;
        font-size: 0.8rem;
    }

    .message-model {
        font-size: 0.7rem;
        color: #888;
        margin-bottom: 0.25rem;
    }

    .message-content {
        margin-bottom: 0.25rem;
    }

    .message-metrics {
        font-size: 0.7rem;
        color: #888;
    }

    #input-container {
        padding: 0.5rem;
        background-color: var(--input-background);
        border-top: 1px solid #333;
        display: flex;
        align-items: center;
    }

    #user-input {
        flex-grow: 1;
        padding: 0.5rem;
        border: 1px solid #4a5568;
        border-radius: 1.5rem;
        background-color: var(--background-color);
        color: var(--text-color);
        font-size: 0.9rem;
    }

    #user-input::placeholder {
        color: #4a5568;
    }

    #send-button {
        background-color: var(--button-color);
        color: var(--text-color);
        border: none;
        border-radius: 50%;
        width: 2.5rem;
        height: 2.5rem;
        margin-left: 0.5rem;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #send-button svg {
        width: 1.2rem;
        height: 1.2rem;
    }

    @media (max-width: 480px) {
        .message {
            max-width: 90%;
        }

        #server-url-container {
            flex-direction: column;
            align-items: stretch;
        }

        #server-url,
        #connect-button {
            width: 100%;
            margin-right: 0;
            margin-bottom: 0.5rem;
        }

        /* Markdown stilleri */
        .message-content {
            line-height: 1.6;
        }

        .message-content code {
            background-color: #2d2d2d;
            padding: 0.2em 0.4em;
            border-radius: 3px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
        }

        /* Kod blokları için stil güncellemeleri */
        .message-content pre {
            background-color: #2d2d2d;
            padding: 1em;
            border-radius: 5px;
            overflow-x: auto;
            margin: 0.5em 0;
        }

        .message-content pre code {
            background-color: transparent;
            padding: 0;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        }

        /* Satır içi kod için stil */
        .message-content code:not(pre code) {
            background-color: rgba(45, 45, 45, 0.5);
            padding: 0.2em 0.4em;
            border-radius: 3px;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 0.9em;
        }

        /* Prism.js tema ayarlamaları */
        .message-content .token.comment,
        .message-content .token.prolog,
        .message-content .token.doctype,
        .message-content .token.cdata {
            color: #8292a2;
        }

        .message-content .token.punctuation {
            color: #f8f8f2;
        }

        .message-content .token.namespace {
            opacity: .7;
        }

        .message-content .token.property,
        .message-content .token.tag,
        .message-content .token.constant,
        .message-content .token.symbol,
        .message-content .token.deleted {
            color: #ff79c6;
        }

        .message-content .token.boolean,
        .message-content .token.number {
            color: #bd93f9;
        }

        .message-content .token.selector,
        .message-content .token.attr-name,
        .message-content .token.string,
        .message-content .token.char,
        .message-content .token.builtin,
        .message-content .token.inserted {
            color: #50fa7b;
        }

        /* Kod blokları için stil güncellemeleri */
        .message-content pre {
            background-color: #2d2d2d;
            padding: 1em;
            border-radius: 5px;
            overflow-x: auto;
            margin: 0.5em 0;
            position: relative;
            /* Prism.js için gerekli */
        }

        .message-content pre code {
            background-color: transparent;
            padding: 0;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            display: block;
            /* Prism.js için gerekli */
        }

        /* Satır içi kod için stil */
        .message-content code:not(pre code) {
            background-color: rgba(45, 45, 45, 0.5);
            padding: 0.2em 0.4em;
            border-radius: 3px;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 0.9em;
        }

        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.25rem;
            font-size: 0.8rem;
        }

        .header-content {
            display: flex;
            align-items: center;
            font-weight: bold;
        }

        .copy-button {
            background: none;
            border: none;
            padding: 2px;
            cursor: pointer;
            opacity: 0.6;
            transition: opacity 0.2s;
            color: inherit;
            margin-left: 8px;
            /* Header içeriği ile buton arasında boşluk bırakır */
            display: flex;
            align-items: center;
        }


        .copy-button:hover {
            opacity: 1;
        }

        .copy-button svg {
            width: 14px;
            height: 14px;
        }

        /* Kopyalama başarılı olduğunda gösterilecek efekt */
        .copy-button.copied {
            color: var(--accent-color);
        }

        /* Mobil için ek stil */
        @media (max-width: 480px) {
            .copy-button {
                padding: 4px;
            }

            .copy-button svg {
                width: 12px;
                height: 12px;
            }
        }
.header-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

    }
</style>

<body>
    <div id="app">
        <div id="server-url-container">
            <input type="text" id="server-url" placeholder="Enter LM Studio server address http://... ">
            <select id="model-select" disabled>
                <option value="">Select a model...</option>
            </select>
            <button id="connect-button" aria-label="Connect to server">Connect</button>
        </div>

        <div id="connection-status">Disconnected</div>
        <div id="chat-container"></div>
        <div id="input-container">
            <textarea id="user-input" placeholder="Type a message..." disabled></textarea>
        
            <button id="send-button" aria-label="Send message" disabled>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                    stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                </svg>
            </button>
        </div>
    </div>
<script>

// Bu değişkenler js/app.js dosyasında olmalı çünkü:
// 1. Uygulama genelinde kullanılan temel DOM elementleri ve durum değişkenleri
// 2. Diğer JS modülleri (chat.js, ui.js) bu değişkenlere ihtiyaç duyuyor
// 3. app.js ana uygulama başlatma dosyası olduğu için en mantıklı yer burası

// Bu değişkenler js/app.js'e taşınmalı:
const chatContainer = document.getElementById('chat-container');
const userInput = document.getElementById('user-input');
const serverUrlInput = document.getElementById('server-url');
const connectButton = document.getElementById('connect-button');
const connectionStatus = document.getElementById('connection-status');
const sendButton = document.getElementById('send-button');
const modelSelect = document.getElementById('model-select');

let isConnected = false;
let currentModel = '';

marked.setOptions({
    gfm: true,
    breaks: true,
    sanitize: false,
    highlight: (code, lang) => Prism.highlight(code, Prism.languages[lang] || Prism.languages.javascript, 'javascript')
});

connectButton.addEventListener('click', connectToServer);
userInput.addEventListener('keypress', sendMessageKeydown);
sendButton.addEventListener('click', sendMessage);

serverUrlInput.focus();
createSaveButton();

modelSelect.addEventListener('change', (e) => {
    currentModel = e.target.value;
    addMessage(`Model changed to: ${currentModel}`, false);
});

function connectToServer() {
    const serverUrl = serverUrlInput.value.trim();
    if (!serverUrl) return updateConnectionStatus('Please enter a valid server address', false);

    fetch(`${serverUrl}/v1/models`, { method: 'GET' })
        .then(response => response.json())
        .then(data => handleModelData(serverUrl, data))
        .catch(error => handleError(error));
}

function handleModelData(serverUrl, data) {
    if (!data.data || !data.data.length) throw new Error('No models available');

    modelSelect.innerHTML = '<option value="">Select a model...</option>';
    data.data.forEach(model => addOptionToSelect(model.id));

    modelSelect.disabled = false;
    currentModel = data.data[0].id; // Varsayılan model
    modelSelect.value = currentModel;
    sendButton.disabled = false;
    isConnected = true;
    updateConnectionStatus('Connected', true);
}

function handleError(error) {
    console.error('Error:', error);
    updateConnectionStatus('Failed to connect', false);
    addMessage('Error: Unable to connect to the LM Studio server. Please check the address and try again.', false);
}

function addOptionToSelect(value) {
    const option = document.createElement('option');
    option.value = value;
    option.textContent = value;
    modelSelect.appendChild(option);
}

function updateConnectionStatus(message, connected) {
    connectionStatus.textContent = message;
    connectionStatus.style.color = connected ? 'var(--accent-color)' : '#f44336';
    connectButton.textContent = connected ? 'Disconnect' : 'Connect';

    serverUrlInput.disabled = connected;
    modelSelect.disabled = !connected;
    userInput.disabled = !connected;
    sendButton.disabled = !connected;
}

function sendMessage() {
    const message = userInput.value.trim();
    if (!message || !isConnected) return;

    addMessage(message, true);
    userInput.value = '';
    sendButton.disabled = true;

    fetch(`${serverUrlInput.value}/v1/chat/completions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            model: currentModel,
            messages: [
                { role: 'system', content: 'I am Qwen, created by Alibaba Cloud. I am a helpful coder python, C, JS assistant.' },
                { role: 'user', content: message }
            ],
            temperature: 0.8,
            max_tokens: -1,
            stream: false
        })
    }).then(response => response.json())
      .then(data => handleResponseData(message, data))
      .catch(error => handleErrorSend(error));
}

function handleResponseData(originalMessage, data) {
    const botReply = data.choices[0].message.content;
    const totalTokens = data.usage.total_tokens;
    const timeElapsed = ((performance.now() - performance.now()) / 1000).toFixed(2);
    const stopReason = data.choices[0].finish_reason === 'stop' ? 'eosFound' : data.choices[0].finish_reason;

    addMessage(botReply, false, `${totalTokens} tokens • ${timeElapsed}s • Stop: ${stopReason}`);
    sendButton.disabled = false;
}

function handleErrorSend(error) {
    console.error('Error:', error);
    addMessage('Error: Unable to get a response from the server. Please try again.', false);

    isConnected = false;
    updateConnectionStatus('Disconnected', false);
    sendButton.disabled = true;
    userInput.focus();
}

function sendMessageKeydown(e) { if (e.key === 'Enter') sendMessage(); }

function createSaveButton() {
    const saveButton = document.createElement('button');
    saveButton.textContent = 'Save Chat';
    saveButton.onclick = saveChat;
    chatContainer.appendChild(saveButton);
}

function saveChat() {
    const messages = Array.from(chatContainer.querySelectorAll('.message')).map(msg => ({
        author: msg.querySelector('.message-header .header-content')?.innerText || 'Unknown',
        content: msg.querySelector('.message-content')?.innerText || '',
        timestamp: new Date().toISOString()
    }));

    const jsonBlob = new Blob([JSON.stringify(messages, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(jsonBlob);

    const a = document.createElement('a');
    a.href = url;
    a.download = 'chat.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

function addMessage(content, isUser, metrics = null) {
    chatContainer.appendChild(createMessageElement(content, isUser, metrics));
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function createMessageElement(content, isUser, metrics) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message', isUser ? 'user-message' : 'assistant-message');

    if (!isUser && currentModel)
        messageDiv.appendChild(createModelDiv(currentModel));

    messageDiv.appendChild(createHeaderDiv(isUser));
    messageDiv.appendChild(createCopyButton(content));
    const contentDiv = createContentDiv(content, isUser);
    processCodeBlocksAndMathJax(contentDiv);
    messageDiv.appendChild(contentDiv);

    if (metrics)
        messageDiv.appendChild(createMetricsDiv(metrics));

    return messageDiv;
}

function createModelDiv(model) {
    const modelDiv = document.createElement('div');
    modelDiv.classList.add('message-model');
    modelDiv.textContent = model;
    return modelDiv;
}

function createHeaderDiv(isUser) {
    const headerDiv = document.createElement('div');
    headerDiv.classList.add('message-header', 'header-flex');

    const headerContent = document.createElement('div');
    headerContent.classList.add('header-content');
    headerContent.textContent = isUser ? 'You:' : 'Assistant:';

    headerDiv.appendChild(headerContent);
    return headerDiv;
}

function createContentDiv(content, isUser) {
    const contentDiv = document.createElement('div');
    contentDiv.classList.add('message-content');

    if (!isUser)
        contentDiv.innerHTML = marked.parse(content);
    else
        contentDiv.textContent = content;

    return contentDiv;
}

function processCodeBlocksAndMathJax(contentDiv) {
    try { Prism.highlightAllUnder(contentDiv); } catch (error) { console.error('Prism.js highlighting failed:', error); }
    handleMathJax(contentDiv);
    loadAndRenderMathJax(contentDiv);
}


function handleMathJax(contentDiv) {
    try {
        MathJax.typeset([contentDiv]);
    } catch (error) {
        console.error('MathJax processing failed:', error);
    }
}

function loadAndRenderMathJax(contentDiv) {
    if (!document.querySelector('script[type="math/tex"]')) {
        // Load MathJax if not already loaded
        const scriptTag = document.createElement('script');
        const head = document.head || document.documentElement;
        scriptTag.type = 'text/x-mathjax-config';
        scriptTag.src = '//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML';
        head.appendChild(scriptTag);

        const configScript = document.createElement('script');
        configScript.type = 'text/x-mathjax-config';
        configScript.innerHTML = `MathJax.Hub.Config({tex2jax: {inlineMath: [["$","$"],["\$$","\$$"]]}});`;
        head.appendChild(configScript);

    }
    MathJax.typeset([contentDiv]);
}

function createCopyButton(content) {
    const copyButton = document.createElement('button');
    copyButton.classList.add('copy-button');

    copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
        </svg>`;

    copyButton.addEventListener('click', () => {
        navigator.clipboard.writeText(content).then(() => {
            copyButton.classList.add('copied');
            setTimeout(() => { copyButton.classList.remove('copied'); }, 1000);
        });
    });

    return copyButton;
}

function createMetricsDiv(metrics) {
    const metricsDiv = document.createElement('div');
    metricsDiv.classList.add('message-metrics');
    metricsDiv.textContent = metrics;
    return metricsDiv;
}
</script>
</body>
</html>